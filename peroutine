#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'date'

module Peroutine
	class << self
		attr_reader :commands
		def print_master_help
			puts "Usage: #{__FILE__} [command] [options]"
			puts "Commands:"
			names = @commands.keys.map(&:to_s).sort
			length = names.map(&:length).max
			names.each do |name|
				puts "  #{name.ljust(length)}  #{@commands[name.to_sym].description}"
			end
		end
		def read_config path
			path = File.expand_path path || '~/.local/share/peroutine/config.yml'
			config = YAML.load_file path, permitted_classes: [Date]
			config.map { |hash| Peroutine::Job.new **hash.transform_keys(&:to_sym) }
		end
	end
	@commands = {}
	@commands.default_proc = ->h, k { h[:help] }
end

module Peroutine::Commands
	module_function
	def help command_name = nil
		if command_name
			Peroutine.commands[command_name.to_sym].print_help
		else
			Peroutine.print_master_help
		end
	end
	def cronjob config: nil
		Peroutine.read_config(config).each &:run
	end
	def list config: nil, show: 'all'
		job_groups = Peroutine.read_config(config).group_by &:on_today?
		job_groups[true] ||= []
		job_groups[false] ||= []
		case show
		when 'on'
			puts job_groups[true].map(&:description)
		when 'off'
			puts job_groups[false].map(&:description)
		else
			puts "On today:"
			puts job_groups[true].map(&:description)
			puts "\nOff today:"
			puts job_groups[false].map(&:description)
		end
	end
	def edit config: nil
		system ENV['EDITOR'] || 'nano', File.expand_path(config || '~/.local/share/peroutine/config.yml')
	end
end

class Peroutine::Command
	attr_reader :name, :description, :option_parser
	attr_accessor :options
	def initialize name, description, &option_parser_block
		@name = name
		@description = description
		@option_parser = OptionParser.new &option_parser_block
		@option_parser.banner += "\n#{description}"
		@options = {}
		Peroutine.commands[name] = self
	end
	def print_help
		puts @option_parser
	end
	def run
		@option_parser.parse! into: @options
		Peroutine::Commands.send @name, *ARGV, **@options
	end
end

class Peroutine::Job
	attr_reader :period, :one_date, :description, :on_command, :off_command, :on_time, :off_time
	def initialize period:, one_date:, description: "", on_command: nil, off_command: nil, on_time: nil, off_time: nil
		@period = period
		@one_date = one_date.to_time
		@description = description
		@on_command = on_command
		@off_command = off_command
		@on_time = on_time
		@off_time = off_time
	end
	def on_today?
		time_elapsed = Time.now - @one_date
		days_elapsed = (time_elapsed / @period / 86400).floor
		days_elapsed % period == 0
	end
	def should_trigger_on?
		!!@on_time && on_today? && Time.now.hour == @on_time
	end
	def should_trigger_off?
		!!@off_time && !on_today? && Time.now.hour == @off_time
	end
	def trigger_on
		system @on_command if @on_command
	end
	def trigger_off
		system @off_command if @off_command
	end
	def run
		trigger_on if should_trigger_on?
		trigger_off if should_trigger_off?
	end
end

Peroutine::Command.new :help, "Print help" do |op|
	op.banner = "Usage: #{__FILE__} help [COMMAND]"
end

Peroutine::Command.new :cronjob, "The command intended to be run hourly by cron" do |op|
	op.banner = "Usage: #{__FILE__} cronjob [options]"
	op.on '-c', '--config CONFIG', 'The config file to use'
end

Peroutine::Command.new :list, "List the jobs" do |op|
	op.banner = "Usage: #{__FILE__} list [options]"
	op.on '-c', '--config CONFIG', 'The config file to use'
	op.on '-s', '--show [on|off|all]', 'What to show', default: 'all'
end

Peroutine::Command.new :edit, "Edit the config file" do |op|
	op.banner = "Usage: #{__FILE__} edit [options]"
	op.on '-c', '--config CONFIG', 'The config file to edit'
end

Peroutine.commands[ARGV.shift&.to_sym].run
